[project]
name = "python-baseapp"
version = "0.1.0"
description = "A modern, type-safe Python web application template"
requires-python = ">=3.12.2"
dependencies = [
    "black==24.2.0",
    "ruff==0.2.2",
    "pytest==8.3.5",
    "python-dotenv==1.0.1",
    "pydantic==2.6.1",
    "pydantic-settings==2.1.0",
    "mypy==1.8.0",
    "fastapi==0.109.2",
    "uvicorn==0.27.1",
    "pytest-cov==6.0.0",
    "httpx==0.27.0",
    "pre-commit==4.0.1",
]

[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/venv/
'''

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable pycodestyle, Pyflakes, and import sorting
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line length violations, handled by black
    "PLR0913", # too many arguments to function call
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["backend", "tests"]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004"]  # Allow assert in tests, allow magic numbers
"backend/src/library.py" = ["N805"]  # Allow cls parameter in pydantic validators

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
pythonpath = [
    ".",
    "backend/src",
]
testpaths = ["backend/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --cov=backend/src --cov-report=term-missing"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["backend/src"] 