name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12.2"]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # For better git history analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # Enable pip caching

    - name: Check if frontend exists
      id: check_frontend
      run: |
        if [ -f "frontend/package.json" ]; then
          echo "frontend_exists=true" >> $GITHUB_OUTPUT
          # Also check for lock files
          if [ -f "frontend/package-lock.json" ] || [ -f "frontend/npm-shrinkwrap.json" ] || [ -f "frontend/yarn.lock" ]; then
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lockfile_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "frontend_exists=false" >> $GITHUB_OUTPUT
          echo "lockfile_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Install Node.js
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: ${{ steps.check_frontend.outputs.lockfile_exists == 'true' && 'npm' || '' }}
        cache-dependency-path: ${{ steps.check_frontend.outputs.lockfile_exists == 'true' && 'frontend/package-lock.json' || '' }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache npm dependencies (if lockfile exists)
      if: steps.check_frontend.outputs.lockfile_exists == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json', 'frontend/npm-shrinkwrap.json', 'frontend/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Python dependencies (backend)
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install -r backend/requirements.txt

    - name: Install frontend dependencies (if frontend exists)
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: |
        cd frontend
        npm ci || (npm install && npm run build)

    - name: Lint (backend)
      run: |
        source venv/bin/activate
        ruff check --diff backend/

    - name: Type check (backend)
      run: |
        source venv/bin/activate
        mypy --strict --ignore-missing-imports backend/src backend/tests

    - name: Run tests (backend)
      run: |
        source venv/bin/activate
        pytest backend/tests/ --cov=backend/src --cov-report=term-missing

    - name: Lint (frontend) (if frontend exists)
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: |
        cd frontend
        npm run lint || (echo "No lint script found in frontend; skipping." && exit 0)

    - name: Run tests (frontend) (if frontend exists)
      if: steps.check_frontend.outputs.frontend_exists == 'true'
      run: |
        cd frontend
        npm run test || (echo "No test script found in frontend; skipping." && exit 0)

    - name: Run pytest with coverage
      run: |
        source venv/bin/activate
        pytest backend/tests/ --cov=backend/src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test  # Run after lint-and-test succeeds
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.2"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security checks
      run: bandit -c pyproject.toml -r backend/src/

    - name: Check dependencies for known vulnerabilities
      run: safety check --file backend/requirements.txt

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-test, security]  # Run after all checks pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.2"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*
